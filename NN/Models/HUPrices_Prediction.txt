import numpy
import matplotlib.pyplot as plt
import pandas
import tensorflow as tf
import math
import numpy as np
from tensorflow.python.keras.models import Sequential
from tensorflow.python.keras.layers import Dense, Dropout
from tensorflow.python.keras.layers import LSTM, SimpleRNN
from sklearn.preprocessing import MinMaxScaler
from sklearn.metrics import mean_squared_error
import os
path="C:/Users/Nikola/Documents/ML Labs/Lab 5 NN"
os.chdir(path)

dataframe = pandas.read_csv('hu_prices.txt', delimiter='\t', usecols=[2], engine='python')
plt.figure(figsize=(20,5))
plt.plot(dataframe)
plt.show()

dataset = dataframe.values
scaler = MinMaxScaler(feature_range=(0.1, 0.9))
dataset = scaler.fit_transform(dataset)

train_size = int(len(dataset) * 0.8)
test_size = len(dataset) - train_size
train, test = dataset[0:train_size,:], dataset[train_size:,:]

def create_dataset(dataset, num_previous):
    X_data, y_data = [], []
    for i in range(len(dataset)-num_previous-1):
        x = dataset[i:(i+num_previous), 0]
        X_data.append(x)
        y_data.append(dataset[i + num_previous, 0])
    return numpy.array(X_data), numpy.array(y_data)

num_previous = 1
X_train, y_train = create_dataset(train, num_previous)
X_test, y_test = create_dataset(test, num_previous)

X_train = numpy.reshape(X_train, (X_train.shape[0], 1, X_train.shape[1]))
X_test = numpy.reshape(X_test, (X_test.shape[0], 1, X_test.shape[1]))

batch_size = 1
model = Sequential()
model.add(SimpleRNN(28,activation='relu', batch_input_shape=(batch_size, X_train.shape[1], X_train.shape[2]),stateful=True))
model.add(Dense(1))
model.compile(loss='mse', optimizer='adam')

epochs = 5
for i in range(epochs):
    model.fit(X_train, np.reshape(y_train,(-1,)), epochs=1, batch_size=batch_size, verbose=1, shuffle=False)
    model.reset_states()


model.reset_states()
model.predict(X_train, batch_size=batch_size)

predictions = list()

for i in range(len(X_test)):
    X = X_test[i]
    X = X.reshape(1, 1, 1)
    yhat = model.predict(X, batch_size=batch_size)[0,0]
    predictions.append(yhat)
    expected = y_test[ i ]

plt.plot(y_test.reshape(len(y_test)))
plt.plot(predictions)
plt.show()

def mean_absolute_percentage_error(y_true, y_pred): 
    y_true, y_pred = numpy.array(y_true), numpy.array(y_pred)
    return numpy.mean(numpy.abs((y_true - y_pred) / y_true))*100

mape = mean_absolute_percentage_error(y_test.reshape(len(y_test)), predictions)
print('Test MAPE: %.2f' % mape)